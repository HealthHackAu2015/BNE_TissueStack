DIRSRC		=	../../

SRCS		=	./src/TS_tiler.c							\
			$(DIRSRC)prompt.c						\
			$(DIRSRC)plugin.c						\
			$(DIRSRC)volume.c						\
			$(DIRSRC)error.c						\
			$(DIRSRC)notification_center.c					\
			$(DIRSRC)log_center.c						\
			$(DIRSRC)thread_pool.c						\
			$(DIRSRC)utils/utils.c						\
			$(DIRSRC)tile_requests.c					\
			$(DIRSRC)percent_and_time.c					\
			$(DIRSRC)tasks.c						\
			$(DIRSRC)memory_mapping.c					\

INCLUDE         =       -I./headers -I../../headers -I../../utils -I/usr/local/nifticlib/2.0.0/include -I/usr/local/bic/include -I/usr/local/minc/2.1.0/include

LIB_PATH        =       -L/usr/local/minc/2.1.0/lib -L/usr/local/nifticlib/2.0.0/lib -L/usr/local/hdf5/1.8.5/lib -L/usr/local/netcdf/4.1.1/lib

LIBS		=	-lhdf5								\
			-lnetcdf 							\
			-lminc2								\
			-lpthread							\
			-lniftiio                                                       \
			-ldl								\
			-lznz								\
			-lz								\
			-lm

EXE_NAME	=	TissueStackTiler

FLAGS		=	-O2 -D_NO_TILING_THREAD_

OBJS		=	$(SRCS:%.c=%.o)

CC		=	gcc

USE_MEMORY_MAPPING	=	no
APP_FLAGS			=

# important configuration variables with defaults
export NAME	=	tissuestack
export VERSION
export APPLICATION_PATH ?= /usr/local/$(NAME)
# the application path including the version
export APPLICATION_ROOT	=	$(APPLICATION_PATH)/$(VERSION)
# the destination for the binaries
export BINS_PATH			=	$(APPLICATION_ROOT)/bin
# the plugin path with its .so 
export PLUGINS_PATH			=	$(APPLICATION_ROOT)/plugins
# the jni shared library

# use memory mapping (turned off by default. did not really deliver gains in our case but can be turned on again with USE_MM=true)?
ifdef USE_MM
ifeq ($(USE_MM),true)
APP_FLAGS=-DUSE_MM
USE_MEMORY_MAPPING=yes
endif
endif

%.o: %.c
	@echo -e "\tCompiling $(@)."
	@$(CC) -DAPPLICATION_PATH='"$(DATA_PATH)"' -DPLUGINS_PATH='"$(PLUGINS_PATH)"' $(APP_FLAGS) \
		-c $(FLAGS) $(INCLUDE) `pkg-config --cflags gtk+-2.0` `GraphicsMagick-config --cppflags --libs --ldflags` -o $@ $<

all:	compile install

prepare:
# the version has to be set for a production build (not debug build)
ifndef VERSION
	$(error VERSION IS NOT SET !!!!!!!!!!!!! Please call make like this: make VERSION=X.X !!!!!)
endif

	@echo -e "\n###################### TISSUE STACK PRE-TILING TOOL BUILD [Version: $(VERSION)] ###################"
	@echo -e "    PLUGINS PATH:          $(PLUGINS_PATH)"
	@echo -e "    BINARIES PATH:         $(BINS_PATH)"
	@echo -e "    USE MEMORY MAPPING:    $(USE_MEMORY_MAPPING)"
	@echo -e "###################### TISSUE STACK PRE-TILING TOOL BUILD [Version: $(VERSION)] ###################\n"

coreCompile:	$(OBJS)
	@$(CC) $(OBJS) -o $(EXE_NAME) $(INCLUDE) $(LIB_PATH) $(LIBS) $(FLAGS) `pkg-config --cflags --libs gtk+-2.0` `GraphicsMagick-config --cppflags --libs --ldflags` > /dev/null
	@echo -e "\tFinished compiling tiling tool."

pluginsCompile:
	@echo -e "\n\n\tCompiling plugins:"
	@echo -e "\t-------------------\n"
	@rm -rf ../../volume.o
	@rm -rf ../../utils/utils.o
	@make -f Makefile.centOS --no-print-directory -C ../../plugins/image_extract/ compile NAME=TissueStackImageExtractPreTilingTool.so FLAGS=-D_NO_TILING_THREAD_
	@rm -rf ../../volume.o
	@rm -rf ../../utils/utils.o
	@echo -e "\n\tFinished compiling image extraction plugin."

install: compile
	@echo -e "\n\tInstalling Binaries (may require super user priviledges):"
	@echo -e "\t-----------------------------------------------\n"
	@echo -e "\tInstalling '$(EXE_NAME)' executable into: $(BINS_PATH)."
	@sudo mkdir -p $(BINS_PATH)
	@sudo cp $(EXE_NAME) $(BINS_PATH)/$(EXE_NAME)
	@echo -e "\tFinished installing '$(EXE_NAME)'."
	@make -f Makefile.centOS --no-print-directory -C ../../plugins/image_extract/ install NAME=TissueStackImageExtractPreTilingTool.so
	@echo -e "\n\tFinished installing binaries.\n"  

clean:
	@echo -e "\n\tCleaning $(EXE_NAME)...\n"
	@rm -rf *~ \#*\# $(NAME) $(EXE_NAME) core hs_err_pid*
	@rm -rf $(DIRSRC)*.o
	@rm -rf ./src/TS_tiler.o
	@rm -rf $(BUILD_PATH)
	@make --no-print-directory -C ../../utils/ clean
	@make -f Makefile.centOS --no-print-directory -C ../../plugins/image_extract/ clean
	@echo -e "\tFinished cleaning $(EXE_NAME).\n"

debug: FLAGS += -D_TSS_DEBUG_

debug: coreCompile pluginsCompile

compile: prepare coreCompile pluginsCompile

recompile: clean compile

re: clean debug install

.PHONY: all prepare compile install clean re recompile

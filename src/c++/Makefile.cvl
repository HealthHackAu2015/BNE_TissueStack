NAME			=	TissueStack Server

SRCS_COMMON		=	$(wildcard common/*.cpp)
SRCS_NETWORKING	=	$(wildcard networking/*.cpp)
SRCS_IMAGING	=	$(wildcard imaging/*.cpp)
SRCS_EXECUTION	=	$(wildcard execution/*.cpp)
SRCS_DATABASE	=	$(wildcard database/*.cpp)
SRCS_SERVICES	=	$(wildcard services/*.cpp)
SRCS_UTILS		=	$(wildcard utils/*.cpp)
SRCS			=	$(wildcard *.cpp)

INCLUDE			=	-Iinclude \
					-Icommon/include -Iexecution/include \
					-Idatabase/include -Iservices/include \
					-Inetworking/include -Iimaging/include \
					-Iutils/include \
					-I/usr/local/graphicsmagick/1.3.18/include/GraphicsMagick \
					-I/usr/local/minc/2.1.0/include \
					-I/usr/local/nifticlib/2.0.0/include

LIB_PATH		=	-L/usr/local/graphicsmagick/1.3.18/lib \
					-L/usr/local/minc/2.1.0/lib \
					-L/usr/local/nifticlib/2.0.0/lib

LIBS			=	-lrt -lpthread -ldl -lpqxx -lpq -lcrypto -luuid \
					-lminc2 -lniftiio -lm -lz -lznz

EXE_NAME		=	TissueStackServer

FLAGS			=	-Wall -Werror -ggdb -std=c++11 -std=gnu++11 -std=c++0x 

CC				=	g++

OBJS_COMMON		=	$(SRCS_COMMON:%.cpp=%.o)
OBJS_NETWORKING	=	$(SRCS_NETWORKING:%.cpp=%.o)
OBJS_IMAGING	=	$(SRCS_IMAGING:%.cpp=%.o)
OBJS_EXECUTION	=	$(SRCS_EXECUTION:%.cpp=%.o)
OBJS_DATABASE	=	$(SRCS_DATABASE:%.cpp=%.o)
OBJS_SERVICES	=	$(SRCS_SERVICES:%.cpp=%.o)
OBJS_UTILS		=	$(SRCS_UTILS:%.cpp=%.o)
OBJS			=	$(SRCS:%.cpp=%.o)

# important configuration variables with defaults
export APP_NAME		=	tissuestack
export VERSION	=	1.6
export APPLICATION_PATH ?= /usr/local/$(APP_NAME)
export DATA_PATH ?= /opt/$(APP_NAME)
# the application path including the version
export APPLICATION_ROOT	=	$(APPLICATION_PATH)/$(VERSION)
# the destination for the binaries
export BINS_PATH			=	$(APPLICATION_ROOT)/bin
# packaging/install configuration
export IS_DEBIAN_BASED=`cat /etc/*-release | grep -i debian | wc -c`
export IS_UBUNTU_BASED=`cat /etc/*-release | grep -i ubuntu | wc -c`

#build path for binary distribution
export BASE_DIR			= 	./../../
export PACKAGING_CONFIG_PATH=	$(BASE_DIR)packaging
export PROFILE_PATH		= 	/etc/profile.d
export BUILD_PATH		=	/tmp/$(APP_NAME)_build
export BUILD_SRC_PATH		=	$(BUILD_PATH)/src
export DIST_NAME		=	$(APP_NAME)-$(VERSION).tar.gz
export SRC_DIST_NAME		=	$(APP_NAME)-$(VERSION)-sources.tar.gz
export EPHEMERAL_STORAGE	=	/mnt

all:	clean prepare compile install compile-tools install-tools

%.o: %.cpp
	@echo -e "\tCompiling \"$(NAME)\" => [$(@)]"
	@$(CC) -DAPPLICATION_PATH='"$(DATA_PATH)"' -c $(LIBS) $(FLAGS) $(INCLUDE) `GraphicsMagick-config --cppflags --libs` -o $@ -fPIC -pie $<
	
prepare:
	@if [ ! -f /etc/profile.d/modules.sh ]; then echo "ERROR: Modules package is not installed !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load hdf5/1.8.5 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed hdf5 package (1.8.5). Please install it and load it: 'module load hdf5/1.8.5' !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load netcdf/4.1.1 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed netcdf package (4.1.1). Please install it and load it: 'module load netcdf/4.1.1' !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load nifticlib/2.0.0 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed nifticlib package (2.0.0). Please install it and load it: 'module load nifticlib 2.0.0' !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load minc/2.1.0 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed minc package (2.1.0). Please install it and load it: 'module load minc 2.1.0' !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load graphicsmagick/1.3.18 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed graphics magick package (1.3.18). Please install it and load it: 'module load graphics magick 1.3.18' !!!!!"; exit -1; fi;
	@/etc/profile.d/modules.sh;module load libjpeg-turbo 2> /tmp/build_mod_load; CHECK_SIZE=`stat -c%s /tmp/build_mod_load`; if [ $$CHECK_SIZE -ne 0 ]; then echo "ERROR: Could not locate needed libjpeg-turbo package. Please install it and load it: 'module load libjpeg-turbo' !!!!!"; exit -1; fi;

	@echo -e "\n\t###################### TISSUE STACK BUILD [Version: $(VERSION)] ###################"
	@echo -e "\t    APPLICATION DATA:      $(DATA_PATH)"
	@echo -e "\t    BINARIES PATH:         $(BINS_PATH)"
	@echo -e "\t###################### TISSUE STACK BUILD [Version: $(VERSION)] ###################\n"

compile:	$(OBJS_COMMON) $(OBJS_NETWORKING) $(OBJS_DATABASE) $(OBJS_IMAGING) \
			$(OBJS_EXECUTION)  $(OBJS_SERVICES) $(OBJS_UTILS) $(OBJS)
	@echo -e "\tCompiling \"$(NAME)\" => $(EXE_NAME)"
	@$(CC) -DAPPLICATION_PATH='"$(DATA_PATH)"' $(OBJS_COMMON) $(OBJS_NETWORKING) $(OBJS_EXECUTION) $(OBJS_DATABASE) \
							$(OBJS_SERVICES) $(OBJS_IMAGING) $(OBJS_UTILS) $(OBJS) \
							$(LIB_PATH) $(LIBS) $(FLAGS) $(INCLUDE) \
							`GraphicsMagick-config --cppflags --libs` -o $(EXE_NAME)

compile-tools:
	@make -f Makefile.cvl --no-print-directory -C tools compile

install-tools:
	@make -f Makefile.cvl --no-print-directory -C tools install
	
install: compile
	@echo -e "\n\tInstalling $(NAME) (requires super user priviledges):"
	@echo -e "\t-----------------------------------------------\n"
	@echo -e "\tInstalling '$(EXE_NAME)' executable into: $(BINS_PATH)."
	@sudo rm -rf $(BINS_PATH)
	@sudo mkdir -p $(BINS_PATH)
	@if [ ! -f $(EXE_NAME) ]; then echo "\nExecutable '$(EXE_NAME)' does not exist!"; fi;
	@sudo cp $(EXE_NAME) $(BINS_PATH)/$(EXE_NAME)
	@echo -e "\n\tFinished installation of $(NAME).\n"  
        
clean:
	@make -f Makefile --no-print-directory clean > /dev/null
	
dist: all
	@echo -e "\n\n\tBuilding binary archive: $(DIST_NAME):"
	@echo -e "\t---------------------------------------------------"
	
	@echo -e "\n\tPreparing build directory..."
	@rm -rf $(BUILD_PATH)
	@mkdir -p $(BUILD_PATH)/logs
	@mkdir -p $(BUILD_SRC_PATH)$(BINS_PATH)
	@mkdir -p $(BUILD_SRC_PATH)$(DATA_PATH)/ands
	@mkdir -p $(BUILD_SRC_PATH)$(DATA_PATH)/conf
	@mkdir -p $(BUILD_SRC_PATH)$(DATA_PATH)/colormaps
	@mkdir -p $(BUILD_SRC_PATH)$(DATA_PATH)/sql
	@mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/data
	@ln -s $(EPHEMERAL_STORAGE)/$(APP_NAME)/data $(BUILD_SRC_PATH)$(DATA_PATH)/data
	@mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/tiles
	@ln -s $(EPHEMERAL_STORAGE)/$(APP_NAME)/tiles $(BUILD_SRC_PATH)$(DATA_PATH)/tiles
	@mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/upload
	@ln -s $(EPHEMERAL_STORAGE)/$(APP_NAME)/upload $(BUILD_SRC_PATH)$(DATA_PATH)/upload
	@ echo "This is a binary build" > $(BUILD_SRC_PATH)/readme.txt

	@echo -e "\tCopying over Tissue Stack Image Server & Tools executables"
	@cp $(BINS_PATH)/* $(BUILD_SRC_PATH)$(BINS_PATH)
	
	@echo -e "\tCopying over front-end resources and colormaps..."
	@cp $(BASE_DIR)data/colormaps/* $(BUILD_SRC_PATH)$(DATA_PATH)/colormaps
	@cp -r $(BASE_DIR)/src/web $(BUILD_SRC_PATH)$(DATA_PATH)
	@ln -s $(DATA_PATH)/tiles $(BUILD_SRC_PATH)$(DATA_PATH)/web/tiles
	
	@echo -e "\tCopying over tissue stack start/conf scripts [error logs: $(BUILD_PATH)/logs/*.log]..."
	@cp -f $(PACKAGING_CONFIG_PATH)/$(APP_NAME)-httpd.conf $(BUILD_SRC_PATH)$(DATA_PATH)/conf/$(APP_NAME).conf &>> $(BUILD_PATH)/logs/$(APP_NAME)_copy.log
	@cp -f $(PACKAGING_CONFIG_PATH)/$(APP_NAME)_modules.sh $(BUILD_SRC_PATH)$(DATA_PATH)/conf/$(APP_NAME)_modules.sh &>> $(BUILD_PATH)/logs/$(APP_NAME)_copy.log
	@cp -f $(PACKAGING_CONFIG_PATH)/$(APP_NAME)_rpm_init.sh $(BUILD_SRC_PATH)$(DATA_PATH)/conf/$(APP_NAME)_init.sh &>> $(BUILD_PATH)/logs/$(APP_NAME)_copy.log
	@cp -f $(PACKAGING_CONFIG_PATH)/$(APP_NAME).sh $(BUILD_SRC_PATH)$(BINS_PATH)/$(APP_NAME) &>> $(BUILD_PATH)/logs/$(APP_NAME)_copy.log
	@chmod 755 $(BUILD_SRC_PATH)$(BINS_PATH)/$(APP_NAME)

	@echo -e "\tCreating sql update script containing the desired paths..."
	@cp  $(BASE_DIR)src/sql/*.sql $(BUILD_SRC_PATH)$(DATA_PATH)/sql
	@ echo -e "--THESE HAVE BEEN GENERATED AS PART OF THE MAKE PROCESS\n\
	UPDATE configuration SET value='$(DATA_PATH)/colormaps' WHERE name='colormaps_directory';\n\
	UPDATE configuration SET value='$(DATA_PATH)/tiles' WHERE name='server_tile_directory';\n\
	UPDATE configuration SET value='$(DATA_PATH)/upload' WHERE name='upload_directory';\n\
	UPDATE configuration SET value='$(DATA_PATH)/lookup' WHERE name='lookup_tables_directory';\n\
	UPDATE configuration SET value='$(DATA_PATH)/tasks/general' WHERE name='tasks_queue_file';\n\
	UPDATE configuration SET value='$(DATA_PATH)/data' WHERE name='data_directory';\n\
	UPDATE configuration SET value='$(DATA_PATH)/ands/datasets.xml' WHERE name='ands_dataset_xml';\n\
	" > $(BUILD_SRC_PATH)$(DATA_PATH)/sql/update_$(APP_NAME)_config.sql;


	@echo -e "\tCreating environment script containing the desired paths..."
	@ echo -e "#!/bin/bash\n\
	mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/tiles\n\
	mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/data\n\
	mkdir -p $(EPHEMERAL_STORAGE)/$(APP_NAME)/upload\n\
	chown -R $(APP_NAME):$(APP_NAME) $(EPHEMERAL_STORAGE)/$(APP_NAME)/data\n\
	chown -R $(APP_NAME):$(APP_NAME) $(EPHEMERAL_STORAGE)/$(APP_NAME)/upload\n\
	chown $(APP_NAME):$(APP_NAME) $(EPHEMERAL_STORAGE)/$(APP_NAME)/tiles\n\
	TISSUE_STACK_HOME=$(DATA_PATH)\n\
	IMAGE_SERVER_EXE=$(BINS_PATH)/$(EXE_NAME)\n\
	PATH=\$$PATH:$(BINS_PATH)\n\
	HDF5_DISABLE_VERSION_CHECK=1\n\
	export HDF5_DISABLE_VERSION_CHECK TISSUE_STACK_HOME IMAGE_SERVER_EXE PATH" > $(BUILD_SRC_PATH)$(BINS_PATH)/$(APP_NAME)_env.sh
	@chmod 755 $(BUILD_SRC_PATH)$(BINS_PATH)/$(APP_NAME)_env.sh

	@echo -e "\tCopying over pre,post and uninstall scripts for packaging ...\n"
	@cp -f $(PACKAGING_CONFIG_PATH)/pre-install-cvl.sh $(BUILD_SRC_PATH)/pre-install.sh
	@chmod 755 $(BUILD_SRC_PATH)/pre-install.sh
	@cp -f $(PACKAGING_CONFIG_PATH)/post-install-cvl.sh $(BUILD_SRC_PATH)/post-install.sh
	@chmod 755 $(BUILD_SRC_PATH)/post-install.sh
	@cp -f $(PACKAGING_CONFIG_PATH)/pre-uninstall-cvl.sh $(BUILD_SRC_PATH)/pre-uninstall.sh
	@chmod 755 $(BUILD_SRC_PATH)/pre-uninstall.sh
	@cp -f $(PACKAGING_CONFIG_PATH)/post-uninstall-cvl.sh $(BUILD_SRC_PATH)/post-uninstall.sh
	@chmod 755 $(BUILD_SRC_PATH)/post-uninstall.sh
		
	@echo -e "\tZipping up everything [log: $(BUILD_PATH)/logs/$(APP_NAME)_tar.log ]..."
	@cd $(BUILD_SRC_PATH); tar cvzf $(BUILD_PATH)/$(DIST_NAME) * &> $(BUILD_PATH)/logs/$(APP_NAME)_tar.log
	
	@echo -e "\n\tFinished creating binary archive:  $(BUILD_PATH)/$(DIST_NAME)"

source:	clean
	@echo -e "\n\n\tBuilding source archive: $(SRC_DIST_NAME):"
	@echo -e "\t---------------------------------------------------"
	@mkdir -p $(BUILD_PATH)/sources/sources/data
	@cp ../../COPYING ../../README ../../BUILD_ME_LIKE_THIS_FOR_CVL.sh $(BUILD_PATH)/sources/sources
	@cp Makefile.cvl $(BUILD_PATH)/sources/sources
	@cp -r ../../cvl/* $(BUILD_PATH)/sources
	@cp -r ../../src $(BUILD_PATH)/sources/sources
	@cp -r ../../packaging $(BUILD_PATH)/sources/sources
	@cp -r ../../data/colormaps $(BUILD_PATH)/sources/sources/data
	@cd $(BUILD_PATH)/sources; tar cvzf ../$(SRC_DIST_NAME) * > /dev/null
	@echo -e "\n\tFinished creating source archive:  $(BUILD_PATH)/$(SRC_DIST_NAME)\n\n"
